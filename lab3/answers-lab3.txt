###Questions

Answer the following questions in your answers-lab3.txt:

1. What is the purpose of having an individual handler function for each exception/interrupt? (i.e., if all exceptions/interrupts were delivered to the same handler, what feature that exists in the current implementation could not be provided?)

	if we take ``TRAPHANDLER`` or ``TRAPHANDLER_NOEC`` macro to handle all those exceptions and interrupts, the interrupt number could not be recorded. Besides, it's hard to deal if exceptions or interrupts output error.


2. Did you have to do anything to make the user/softint program behave correctly? The grade script expects it to produce a general protection fault (trap 13), but softint's code says int $14. Why should this produce interrupt vector 13? What happens if the kernel actually allows softint's int $14 instruction to invoke the kernel's page fault handler (which is interrupt vector 14)?

	The privilege level of page fault in IDT is 0, which means only the kernel could generate this interrupt, though the user/softint calls ``int 14``. So the interrupt vector 13 is generated to protect as the user have no right to call int 14. If the kernel allows softint's ``int 14``instruction to invoke the kernel's page fault handler, then some malevolent user application may keep calling page fault, then the memory is occupied. 

	
3. The break point test case will either generate a break point exception or a general protection fault depending on how you initialized the break point entry in the IDT (i.e., your call to SETGATE from trap_init). Why? How do you need to set it up in order to get the breakpoint exception to work as specified above and what incorrect setup would cause it to trigger a general protection fault?

	The user could execute ``int 3`` instruction to generate an breakpoint exception, we set the privilege level of breakpoint exception in IDT to 3: ``	SETGATE(idt[T_BRKPT], 0 , GD_KT, entry_brkpt, 3);``. So it could be executed under user space for debugging. If we set the DBL to 0, then the user do not have the permission to execute ``int 3`` instruction, which will result in a general protection fault.
	
4. What do you think is the point of these mechanisms, particularly in light of what the user/softint test program does?

	This mechanisms could protect kernel or other processes from interference of user space processes, when the interrupts and exceptions happen. Thus, only via some limited and preparatory entries does the user application trap into kernel, after privilege level checking, the kernel could jump to the target address. E.g. when the user/softint tries to generate a page fault, which is of kernel privilege level, the kernel will generate a general protection fault.
	
